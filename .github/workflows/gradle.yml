name: Gradle CI Pipeline

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # =========================================================
  # 1️⃣  BUILD
  # =========================================================
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
          cache: gradle

      - name: Build project
        run: ./gradlew clean build -x test

  #  # =========================================================
  #  # 2️⃣  UNIT TESTS - CONTROLLER
  #  # =========================================================
  #  unit-test-controller:
  #    name: Unit Test - Controller
  #    runs-on: ubuntu-latest
  #    needs: build
  #
  #    steps:
  #      - uses: actions/checkout@v4
  #      - uses: actions/setup-java@v4
  #        with:
  #          distribution: temurin
  #          java-version: 21
  #          cache: gradle
  #
  #      - name: Run Controller Unit Tests
  #        run: ./gradlew test --tests "*controller.*"

  # =========================================================
  # 3️⃣  UNIT TESTS - SERVICE
  # =========================================================
  unit-test-service:
    name: Unit Test - Service
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
          cache: gradle

      - name: Run Service Unit Tests
        run: ./gradlew test --tests "*service.*"

  # =========================================================
  # 4️⃣  INTEGRATION TESTS
  # =========================================================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-test-service

    services:
      mongo:
        image: mongo:7.0
        ports: [ '27017:27017' ]
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
          cache: gradle

      - name: Run Integration Tests
        run: ./gradlew test --tests "*integration.*"

  # =========================================================
  # 5️⃣  JWT INTEGRATION TESTS
  # =========================================================
  #  jwt-tests:
  #    name: JWT Integration Tests
  #    runs-on: ubuntu-latest
  #    needs: integration-tests
  #
  #    steps:
  #      - uses: actions/checkout@v4
  #      - uses: actions/setup-java@v4
  #        with:
  #          distribution: temurin
  #          java-version: 21
  #          cache: gradle
  #
  #      - name: Run JWT Tests
  #        run: ./gradlew test --tests "*jwt.*"

  # =========================================================
  # 6️⃣  E2E SMOKE TESTS
  # =========================================================
  #  e2e-tests:
  #    name: E2E Smoke Tests
  #    runs-on: ubuntu-latest
  #    needs: jwt-tests
  #
  #    steps:
  #      - uses: actions/checkout@v4
  #      - uses: actions/setup-java@v4
  #        with:
  #          distribution: temurin
  #          java-version: 21
  #          cache: gradle
  #
  #      - name: Run E2E Smoke Tests
  #        run: ./gradlew test --tests "*e2e.*"

  # =========================================================
  # 7️⃣  COVERAGE E REPORTS
  # =========================================================
  reports:
    name: Reports and Coverage
    runs-on: ubuntu-latest
    needs: [ integration-tests ]
    if: always()

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
          cache: gradle

      - name: Run tests with coverage
        run: ./gradlew jacocoTestReport

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./build/reports/jacoco/test/jacocoTestReport.xml
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Publish JUnit test report
        uses: mikepenz/action-junit-report@v4
        with:
          report_paths: '**/build/test-results/test/TEST-*.xml'

      # --------------------------------------------------------
      # 5️⃣  Comentar PR com resumo de cobertura
      # --------------------------------------------------------
      - name: Comment PR with coverage
        uses: madrapps/jacoco-report@v1.6.1
        if: github.event_name == 'pull_request'
        with:
          paths: ${{ github.workspace }}/build/reports/jacoco/test/jacocoTestReport.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          min-coverage-overall: 80
          min-coverage-changed-files: 80

      - name: Upload HTML coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-html-report
          path: build/reports/jacoco/test/html


      # --------------------------------------------------------
      # 7️⃣  Deploy automático no GitHub Pages (branch gh-pages)
      # --------------------------------------------------------
      - name: Deploy Jacoco Report to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build/reports/jacoco/test/html
          destination_dir: jacoco
          publish_branch: gh-pages
          force_orphan: true

