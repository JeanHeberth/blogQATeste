plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.1'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'  // ‚úÖ Plugin JaCoCo
}

group = 'br.com'
version = '0.0.1-SNAPSHOT'
description = 'blogQATeste'

java {
    sourceCompatibility = '21'
    targetCompatibility = '21'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    testImplementation platform('org.testcontainers:testcontainers-bom:1.20.4')
    testImplementation 'org.testcontainers:testcontainers'
    testImplementation 'org.testcontainers:mongodb'
    testImplementation 'org.testcontainers:junit-jupiter'
}

// ========================================
// CONFIGURA√á√ÉO DE TESTES
// ========================================
tasks.named('test') {
    useJUnitPlatform()

    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1

    environment "TESTCONTAINERS_RYUK_DISABLED", "false"
    environment "TESTCONTAINERS_CHECKS_DISABLE", "false"

    systemProperty "junit.jupiter.execution.parallel.enabled", "false"

    minHeapSize = "512m"
    maxHeapSize = "2048m"

    reports {
        html.required = true
        junitXml.required = true
    }

    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showExceptions true
        showCauses true
        showStackTraces true
        showStandardStreams = false

        afterSuite { desc, result ->
            if (!desc.parent) {
                println ""
                println "--------------------------------------------------"
                println "Resultados dos Testes:"
                println "--------------------------------------------------"
                println "Testes executados: ${result.testCount}"
                println "Sucessos: ${result.successfulTestCount}"
                println "Falhas: ${result.failedTestCount}"
                println "Ignorados: ${result.skippedTestCount}"
                println "--------------------------------------------------"
            }
        }
    }

    // Gera relat√≥rio JaCoCo automaticamente ap√≥s testes
    finalizedBy jacocoTestReport
}

// ========================================
// CONFIGURA√á√ÉO JACOCO
// ========================================
jacoco {
    toolVersion = "0.8.11"
}

jacocoTestReport {
    dependsOn test

    reports {
        xml {
            required = true
        }
        html {
            required = true
        }
        csv {
            required = false
        }
    }

    // Excluir classes que n√£o precisam cobertura
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/QaBlogApplication.class',
                    '**/config/**',
                    '**/dto/**',
                    '**/*Config.class',
                    '**/*Exception.class',
                    '**/domain/TipoQa.class',
                    '**/*Builder.class',
            ])
        }))
    }

    doLast {
        println ""
        println "=" * 70
        println "üìä RELAT√ìRIO JACOCO GERADO"
        println "=" * 70
        println "üåê HTML: ${buildDir}/reports/jacoco/test/html/index.html"
        println "üìÑ XML:  ${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        println "=" * 70
        println ""
    }
}

// Verifica√ß√£o de cobertura m√≠nima
jacocoTestCoverageVerification {
    dependsOn jacocoTestReport

    violationRules {
        // Regra geral do projeto
        rule {
            enabled = true
            element = 'BUNDLE'

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.70
            }
        }

        // Regra para services (mais rigorosa)
        rule {
            enabled = true
            element = 'CLASS'
            includes = ['br.com.qablog.service.*']

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.90
            }
        }

        // Regra para dom√≠nio
        rule {
            enabled = true
            element = 'CLASS'
            includes = ['br.com.qablog.domain.*']
            excludes = ['br.com.qablog.domain.TipoQa']

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.85
            }
        }
    }
}

// Integrar verifica√ß√£o com gradle check
check.dependsOn jacocoTestCoverageVerification

// Task customizada para gerar relat√≥rio e abrir no navegador
tasks.register('jacocoReport') {
    group = 'verification'
    description = 'Gera relat√≥rio JaCoCo e tenta abrir no navegador'

    dependsOn test, jacocoTestReport

    doLast {
        def reportPath = file("${buildDir}/reports/jacoco/test/html/index.html")

        if (reportPath.exists()) {
            println ""
            println "=" * 80
            println "üìä RELAT√ìRIO JACOCO DISPON√çVEL"
            println "=" * 80
            println "üìÇ Arquivo: ${reportPath.absolutePath}"
            println ""

            // Tentar abrir no navegador
            def os = System.getProperty('os.name').toLowerCase()
            try {
                if (os.contains('windows')) {
                    exec {
                        commandLine 'cmd', '/c', "start ${reportPath.absolutePath}"
                        ignoreExitValue true
                    }
                } else if (os.contains('mac')) {
                    exec {
                        commandLine 'open', reportPath.absolutePath
                        ignoreExitValue true
                    }
                } else {
                    exec {
                        commandLine 'xdg-open', reportPath.absolutePath
                        ignoreExitValue true
                    }
                }
                println "‚úÖ Abrindo relat√≥rio no navegador..."
            } catch (Exception e) {
                println "‚ÑπÔ∏è  Abra manualmente o arquivo acima"
            }
            println "=" * 80
            println ""
        } else {
            println "‚ö†Ô∏è  Relat√≥rio n√£o encontrado. Execute primeiro: ./gradlew test"
        }
    }
}
